name: movies workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test_with_linters:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9' ]
    name: Python ${{ matrix.python-version }} version
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy

      - name: Lint with wemake-python-styleguide for python ${{ matrix.python-version }} version
        uses: wemake-services/wemake-python-styleguide@0.16.1

      - name: Lint with mypy for python ${{ matrix.python-version }} version
        run: mypy -m bigdata_api

  test_services_in_docker:
    runs-on: ubuntu-latest
    needs: test_with_linters
    env:
      PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
      KAFKA_DB: ${{ secrets.KAFKA_DB }}
      KAFKA_HOST: ${{ secrets.KAFKA_HOST }}
      KAFKA_PORT: ${{ secrets.KAFKA_PORT }}
      BIGDATASPI_HOST: ${{ secrets.BIGDATASPI_HOST }}
      BIGDATASPI_PORT: ${{ secrets.BIGDATASPI_PORT }}
      BASE_URL: ${{ secrets.BASE_URL }}
      AUTH_HOST: ${{ secrets.AUTH_HOST }}
      AUTH_PORT: ${{ secrets.AUTH_PORT }}
      AUTH_BASE_URL: ${{ secrets.AUTH_BASE_URL }}
      ENABLE_AUTHORIZATION: ${{ secrets.ENABLE_AUTHORIZATION }}
      KAFKA_HOST_TEST: ${{ secrets.KAFKA_HOST_TEST }}
      KAFKA_PORT_TEST: ${{ secrets.KAFKA_PORT_TEST }}
      PYTHONPATH: ${{ secrets.PYTHONPATH }}
    services:
      zookeeper_kafka:
        image: confluentinc/cp-zookeeper:7.0.1
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
      broker:
        image: confluentinc/cp-server:7.0.1
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
          KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
          KAFKA_JMX_PORT: 9101
          KAFKA_JMX_HOSTNAME: localhost
          KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
          CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
          CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
          CONFLUENT_METRICS_ENABLE: 'true'
          CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    steps:
      - uses: actions/checkout@v3
      - name: Build the stack
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d --build bigdata-api

      - name: Run tests for bigdata_api
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml exec -T bigdata-api pytest

      - name: Send telegram message on push
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}
